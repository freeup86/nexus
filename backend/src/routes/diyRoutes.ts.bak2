import { Router, Response } from 'express';
import { PrismaClient } from '../generated/prisma';
import { AuthRequest } from '../middleware/auth';
import { body, param, query, validationResult } from 'express-validator';
import multer from 'multer';
import path from 'path';
import fs from 'fs/promises';
import sharp from 'sharp';
import Anthropic from '@anthropic-ai/sdk';

const router = Router();
const prisma = new PrismaClient();

// Initialize Anthropic Claude
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY || ''
});

// Configure multer for photo uploads
const storage = multer.diskStorage({
  destination: async (_req, _file, cb) => {
    const uploadDir = path.join(process.env.UPLOAD_DIR || './uploads', 'diy-photos');
    await fs.mkdir(uploadDir, { recursive: true });
    cb(null, uploadDir);
  },
  filename: (_req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, `photo-${uniqueSuffix}${path.extname(file.originalname)}`);
  }
});

const upload = multer({
  storage,
  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit
  fileFilter: (_req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  }
});

// Validation middleware
const validateRequest = (req: AuthRequest, res: Response, next: Function) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.error('Validation errors:', errors.array());
    res.status(400).json({ errors: errors.array() });
    return;
  }
  next();
};

// Create a new DIY project
router.post('/projects/create',
  [
    body('title').notEmpty().trim(),
    body('description').optional().trim(),
    body('projectType').optional().trim(),
    body('difficultyLevel').optional().isIn(['beginner', 'intermediate', 'advanced']),
    body('estimatedDuration').optional().isInt({ min: 1 }),
    body('estimatedCost').optional().isFloat({ min: 0 })
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { title, description, projectType, difficultyLevel, estimatedDuration, estimatedCost } = req.body;

      // Create the project
      const project = await prisma.dIYProject.create({
        data: {
          userId,
          title,
          description,
          projectType,
          difficultyLevel,
          estimatedDuration,
          estimatedCost,
          status: 'planning'
        },
        include: {
          user: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true
            }
          }
        }
      });

      res.status(201).json({ project });
    } catch (error) {
      console.error('Create project error:', error);
      res.status(500).json({ error: 'Failed to create project' });
    }
  }
);

// Get project details
router.get('/projects/:id',
  [param('id').isUUID()],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      const { id } = req.params;

      const project = await prisma.dIYProject.findFirst({
        where: { 
          id,
          OR: [
            { userId },
            { communityShares: { some: { isPublic: true } } }
          ]
        },
        include: {
          user: {
            select: {
              id: true,
              username: true,
              firstName: true,
              lastName: true
            }
          },
          supplies: true,
          photos: {
            orderBy: { takenAt: 'desc' }
          },
          milestones: {
            orderBy: { stepOrder: 'asc' }
          },
          tools: true,
          issues: {
            include: {
              photo: true
            }
          }
        }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      res.json({ project });
    } catch (error) {
      console.error('Get project error:', error);
      res.status(500).json({ error: 'Failed to get project' });
    }
  }
);

// Update project
router.put('/projects/:id',
  [
    param('id').isUUID(),
    body('title').optional().trim(),
    body('description').optional().trim(),
    body('status').optional().isIn(['planning', 'active', 'completed', 'paused']),
    body('actualDuration').optional().isInt({ min: 0 }),
    body('actualCost').optional().isFloat({ min: 0 })
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { id } = req.params;

      // Verify ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id, userId }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      // Update project
      const updatedProject = await prisma.dIYProject.update({
        where: { id },
        data: {
          ...req.body,
          updatedAt: new Date()
        }
      });

      res.json({ project: updatedProject });
    } catch (error) {
      console.error('Update project error:', error);
      res.status(500).json({ error: 'Failed to update project' });
    }
  }
);

// Get user's projects
router.get('/projects/user/:userId',
  [param('userId').notEmpty()],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const { userId } = req.params;
      const requestingUserId = req.user?.userId;
      
      // Only show projects if it's the user's own or public projects
      const whereClause = userId === requestingUserId 
        ? { userId }
        : { 
            userId,
            communityShares: { some: { isPublic: true } }
          };

      const projects = await prisma.dIYProject.findMany({
        where: whereClause,
        include: {
          photos: {
            take: 1,
            orderBy: { takenAt: 'desc' }
          },
          milestones: {
            select: {
              id: true,
              status: true
            }
          },
          _count: {
            select: {
              supplies: true,
              photos: true,
              milestones: true,
              issues: true
            }
          }
        },
        orderBy: { updatedAt: 'desc' }
      });

      res.json({ projects });
    } catch (error) {
      console.error('Get user projects error:', error);
      res.status(500).json({ error: 'Failed to get projects' });
    }
  }
);

// AI-powered project analysis
router.post('/projects/:id/analyze',
  [param('id').isUUID()],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { id } = req.params;

      // Get project details
      const project = await prisma.dIYProject.findFirst({
        where: { id, userId },
        include: {
          supplies: true,
          milestones: true,
          tools: true
        }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      // Generate AI project plan
      const projectPlan = await generateAIProjectPlan(project);

      // Update project with AI plan
      await prisma.dIYProject.update({
        where: { id },
        data: {
          aiProjectPlan: JSON.stringify(projectPlan)
        }
      });

      res.json({ projectPlan });
    } catch (error) {
      console.error('Project analysis error:', error);
      res.status(500).json({ error: 'Failed to analyze project' });
    }
  }
);

// Upload project photo
router.post('/projects/:id/photos',
  upload.single('photo'),
  [
    param('id').isUUID(),
    body('photoType').optional().isIn(['progress', 'before', 'after', 'issue', 'completed']),
    body('stepNumber').optional().isInt({ min: 1 }),
    body('caption').optional().trim(),
    body('voiceNote').optional().trim()
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { id } = req.params;
      const { photoType, stepNumber, caption, voiceNote } = req.body;

      // Verify ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id, userId }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      if (!req.file) {
        res.status(400).json({ error: 'No photo uploaded' });
        return;
      }

      // Generate thumbnail
      const thumbnailPath = req.file.path.replace(/(\.[^.]+)$/, '-thumb$1');
      await sharp(req.file.path)
        .resize(300, 300, { fit: 'cover' })
        .toFile(thumbnailPath);

      // Create photo record
      const photo = await prisma.projectPhoto.create({
        data: {
          projectId: id,
          fileName: req.file.originalname,
          filePath: req.file.path,
          fileSize: req.file.size,
          photoType,
          stepNumber,
          caption,
          voiceNote,
          thumbnailPath
        }
      });

      // Analyze photo with AI if needed
      if (photoType === 'issue' || photoType === 'progress') {
        const analysis = await analyzeProjectPhoto(photo, project);
        await prisma.projectPhoto.update({
          where: { id: photo.id },
          data: { aiAnalysis: JSON.stringify(analysis) }
        });
        
        // Create issue record if problems detected
        if (analysis.issuesDetected && analysis.issuesDetected.length > 0) {
          for (const issue of analysis.issuesDetected) {
            await prisma.projectIssue.create({
              data: {
                projectId: id,
                photoId: photo.id,
                issueType: (issue as any).type,
                description: (issue as any).description,
                severity: (issue as any).severity,
                aiDetected: true,
                aiSuggestions: JSON.stringify((issue as any).suggestions)
              }
            });
          }
        }
      }

      res.status(201).json({ photo });
    } catch (error) {
      console.error('Upload photo error:', error);
      res.status(500).json({ error: 'Failed to upload photo' });
    }
  }
);

// Manage project supplies
router.post('/projects/:id/supplies',
  [
    param('id').isUUID(),
    body('supplies').isArray(),
    body('supplies.*.itemName').notEmpty().trim(),
    body('supplies.*.quantity').optional().isFloat({ min: 0 }),
    body('supplies.*.estimatedCost').optional().isFloat({ min: 0 })
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { id } = req.params;
      const { supplies } = req.body;

      // Verify ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id, userId }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      // Create supplies
      const createdSupplies = await prisma.projectSupply.createMany({
        data: supplies.map((s: any) => ({
          projectId: id,
          ...s
        }))
      });

      res.status(201).json({ 
        message: 'Supplies added successfully',
        count: createdSupplies.count 
      });
    } catch (error) {
      console.error('Add supplies error:', error);
      res.status(500).json({ error: 'Failed to add supplies' });
    }
  }
);

// Update project progress
router.post('/projects/:id/progress',
  [
    param('id').isUUID(),
    body('milestoneId').optional().isUUID(),
    body('progressPercentage').optional().isInt({ min: 0, max: 100 })
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { id } = req.params;
      const { milestoneId, progressPercentage } = req.body;

      // Verify ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id, userId }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      // Update milestone if provided
      if (milestoneId) {
        await prisma.projectMilestone.update({
          where: { id: milestoneId },
          data: {
            status: 'completed',
            completedAt: new Date()
          }
        });

        // Calculate overall progress
        const milestones = await prisma.projectMilestone.findMany({
          where: { projectId: id }
        });

        const completedCount = milestones.filter((m: any) => m.status === 'completed').length;
        const totalCount = milestones.length;
        const calculatedProgress = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

        await prisma.dIYProject.update({
          where: { id },
          data: {
            progressPercentage: calculatedProgress,
            status: calculatedProgress === 100 ? 'completed' : 'active',
            completionDate: calculatedProgress === 100 ? new Date() : null
          }
        });
      } else if (progressPercentage !== undefined) {
        // Direct progress update
        await prisma.dIYProject.update({
          where: { id },
          data: {
            progressPercentage,
            status: progressPercentage === 100 ? 'completed' : 'active',
            completionDate: progressPercentage === 100 ? new Date() : null
          }
        });
      }

      res.json({ message: 'Progress updated successfully' });
    } catch (error) {
      console.error('Update progress error:', error);
      res.status(500).json({ error: 'Failed to update progress' });
    }
  }
);

// Share project to community
router.post('/community/share',
  [
    body('projectId').isUUID(),
    body('title').optional().trim(),
    body('description').optional().trim(),
    body('tags').optional().isArray(),
    body('featuredPhotoId').optional().isUUID()
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { projectId, title, description, tags, featuredPhotoId } = req.body;

      // Verify ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id: projectId, userId }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      // Check if already shared
      const existingShare = await prisma.communityShare.findFirst({
        where: { projectId, userId }
      });

      if (existingShare) {
        // Update existing share
        const updated = await prisma.communityShare.update({
          where: { id: existingShare.id },
          data: {
            title: title || project.title,
            description,
            tags: tags ? JSON.stringify(tags) : undefined,
            featuredPhotoId,
            updatedAt: new Date()
          }
        });
        res.json({ share: updated });
      } else {
        // Create new share
        const share = await prisma.communityShare.create({
          data: {
            projectId,
            userId,
            title: title || project.title,
            description,
            tags: tags ? JSON.stringify(tags) : undefined,
            featuredPhotoId
          }
        });
        res.status(201).json({ share });
      }
    } catch (error) {
      console.error('Share project error:', error);
      res.status(500).json({ error: 'Failed to share project' });
    }
  }
);

// Browse community gallery
router.get('/community/gallery',
  [
    query('page').optional().isInt({ min: 1 }),
    query('limit').optional().isInt({ min: 1, max: 50 }),
    query('projectType').optional().trim(),
    query('difficultyLevel').optional().isIn(['beginner', 'intermediate', 'advanced']),
    query('search').optional().trim()
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const page = parseInt(req.query.page as string) || 1;
      const limit = parseInt(req.query.limit as string) || 20;
      const offset = (page - 1) * limit;
      const { projectType, difficultyLevel, search } = req.query;

      // Build where clause
      const whereClause: any = {
        isPublic: true
      };

      if (projectType || difficultyLevel || search) {
        whereClause.project = {};
        
        if (projectType) {
          whereClause.project.projectType = projectType;
        }
        
        if (difficultyLevel) {
          whereClause.project.difficultyLevel = difficultyLevel;
        }
        
        if (search) {
          whereClause.OR = [
            { title: { contains: search as string } },
            { description: { contains: search as string } },
            { project: { title: { contains: search as string } } },
            { project: { description: { contains: search as string } } }
          ];
        }
      }

      const [shares, total] = await Promise.all([
        prisma.communityShare.findMany({
          where: whereClause,
          include: {
            project: {
              include: {
                user: {
                  select: {
                    id: true,
                    username: true,
                    firstName: true,
                    lastName: true
                  }
                },
                photos: {
                  take: 3,
                  orderBy: { takenAt: 'desc' }
                },
                _count: {
                  select: {
                    photos: true,
                    milestones: true
                  }
                }
              }
            },
            user: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true
              }
            },
            featuredPhoto: true,
            _count: {
              select: {
                comments: true,
                likes: true
              }
            }
          },
          orderBy: { sharedAt: 'desc' },
          skip: offset,
          take: limit
        }),
        prisma.communityShare.count({ where: whereClause })
      ]);

      res.json({
        shares,
        pagination: {
          page,
          limit,
          total,
          totalPages: Math.ceil(total / limit)
        }
      });
    } catch (error) {
      console.error('Get community gallery error:', error);
      res.status(500).json({ error: 'Failed to get community projects' });
    }
  }
);

// Request help from community
router.post('/community/help',
  [
    body('projectId').isUUID(),
    body('title').notEmpty().trim(),
    body('description').notEmpty().trim(),
    body('requestType').optional().isIn(['technique', 'tool_use', 'material_choice', 'troubleshooting']),
    body('photoId').optional().isUUID()
  ],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { projectId, title, description, requestType, photoId } = req.body;

      // Verify project ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id: projectId, userId }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      const helpRequest = await prisma.helpRequest.create({
        data: {
          projectId,
          userId,
          title,
          description,
          requestType,
          photoId
        },
        include: {
          project: {
            select: {
              id: true,
              title: true,
              projectType: true
            }
          },
          photo: true
        }
      });

      res.status(201).json({ helpRequest });
    } catch (error) {
      console.error('Create help request error:', error);
      res.status(500).json({ error: 'Failed to create help request' });
    }
  }
);

// Delete project
router.delete('/projects/:id',
  [param('id').isUUID()],
  validateRequest,
  async (req: AuthRequest, res: Response): Promise<void> => {
    try {
      const userId = req.user?.userId;
      if (!userId) {
        res.status(401).json({ error: 'Unauthorized' });
        return;
      }
      
      const { id } = req.params;

      // Verify ownership
      const project = await prisma.dIYProject.findFirst({
        where: { id, userId },
        include: {
          photos: true
        }
      });

      if (!project) {
        res.status(404).json({ error: 'Project not found' });
        return;
      }

      // Delete photo files
      for (const photo of project.photos) {
        try {
          await fs.unlink(photo.filePath);
          if (photo.thumbnailPath) {
            await fs.unlink(photo.thumbnailPath);
          }
        } catch (error) {
          console.error('Error deleting photo file:', error);
        }
      }

      // Delete project (cascading deletes will handle related records)
      await prisma.dIYProject.delete({
        where: { id }
      });

      res.json({ message: 'Project deleted successfully' });
    } catch (error) {
      console.error('Delete project error:', error);
      res.status(500).json({ error: 'Failed to delete project' });
    }
  }
);

// Helper function: Generate AI project plan
async function generateAIProjectPlan(project: any) {
  const systemPrompt = `You are an expert DIY project planner. Based on the project details, create a comprehensive step-by-step plan with supply lists, tool requirements, and time estimates.

Analyze the project and provide:
1. Detailed supply list with quantities and estimated costs
2. Complete tool list with alternatives for expensive tools
3. Step-by-step milestones with time estimates
4. Safety considerations and tips
5. Common pitfalls to avoid
6. Cost-saving suggestions

Format your response as JSON with this structure:
{
  "supplies": [
    {
      "itemName": "string",
      "category": "lumber|hardware|paint|electrical|plumbing|other",
      "quantity": number,
      "unit": "pieces|feet|gallons|etc",
      "estimatedCost": number,
      "notes": "string"
    }
  ],
  "tools": [
    {
      "toolName": "string",
      "toolType": "power_tool|hand_tool|measuring|safety",
      "isRequired": boolean,
      "rentalCost": number,
      "purchaseCost": number,
      "alternatives": ["string"]
    }
  ],
  "milestones": [
    {
      "title": "string",
      "description": "string",
      "estimatedDuration": number,
      "stepOrder": number,
      "dependencies": [number]
    }
  ],
  "safetyTips": ["string"],
  "commonMistakes": ["string"],
  "costSavingTips": ["string"],
  "totalEstimatedCost": number,
  "totalEstimatedTime": number
}`;

  const userPrompt = `Project Title: ${project.title}
Description: ${project.description || 'No description provided'}
Type: ${project.projectType || 'General DIY'}
Difficulty Level: ${project.difficultyLevel || 'Not specified'}
Estimated Duration: ${project.estimatedDuration ? project.estimatedDuration + ' hours' : 'Not specified'}
Estimated Cost: ${project.estimatedCost ? '$' + project.estimatedCost : 'Not specified'}

Please create a comprehensive project plan.`;

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-sonnet-20240229',
      max_tokens: 4000,
      temperature: 0.7,
      system: systemPrompt,
      messages: [
        {
          role: 'user',
          content: userPrompt
        }
      ]
    });

    const content = response.content[0];
    if (content.type === 'text') {
      return JSON.parse(content.text);
    }
    
    throw new Error('Unexpected response format');
  } catch (error) {
    console.error('AI project plan generation error:', error);
    return {
      error: 'Failed to generate project plan',
      supplies: [],
      tools: [],
      milestones: [],
      safetyTips: [],
      commonMistakes: [],
      costSavingTips: []
    };
  }
}

// Helper function: Analyze project photo
async function analyzeProjectPhoto(_photo: any, _project: any) {
  // This would integrate with a computer vision API
  // For now, return a mock analysis
  return {
    progressAssessment: {
      completionPercentage: 0,
      quality: 'good',
      observations: []
    },
    issuesDetected: [],
    suggestions: []
  };
}

export default router;