generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  username        String            @unique
  password        String
  firstName       String?
  lastName        String?
  profilePicture  String?
  role            String            @default("USER")
  isActive        Boolean           @default(true)
  bio             String?
  location        String?
  website         String?
  twitterHandle   String?
  phoneNumber     String?
  dateOfBirth     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sessions        Session[]
  tweets          Tweet[]
  contracts       Contract[]
  textExtractions TextExtraction[]
  decisions       Decision[]
  diyProjects     DIYProject[]
  trips           Trip[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tweet {
  id             String   @id @default(uuid())
  userId         String
  content        String
  mediaUrl       String?
  scheduledFor   DateTime?
  status         String   @default("draft")
  twitterId      String?
  twitterUrl     String?
  likes          Int      @default(0)
  retweets       Int      @default(0)
  replies        Int      @default(0)
  impressions    Int      @default(0)
  postedAt       DateTime?
  error          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract {
  id             String   @id @default(uuid())
  userId         String
  filename       String
  originalName   String
  filePath       String
  fileSize       Int
  mimeType       String
  uploadedAt     DateTime @default(now())
  parties        String[]
  contractType   String?
  value          Float?
  currency       String?
  startDate      DateTime?
  endDate        DateTime?
  status         String   @default("pending")
  summary        String?
  keyTerms       String[]
  risks          String[]
  obligations    String[]
  aiAnalysis     Json?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TextExtraction {
  id            String   @id @default(uuid())
  userId        String
  filename      String
  originalName  String
  filePath      String
  fileSize      Int
  mimeType      String
  extractedText String
  confidence    Float?
  language      String?
  processingTime Int?
  metadata      Json?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Decision {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  options     Json
  criteria    Json
  analysis    Json?
  recommendation String?
  status      String   @default("draft")
  decision    String?
  decisionDate DateTime?
  outcome     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DIYProject {
  id             String         @id @default(uuid())
  userId         String
  title          String
  description    String?
  category       String
  difficulty     String
  estimatedTime  Int?
  estimatedCost  Float?
  status         String         @default("planning")
  progress       Int            @default(0)
  startDate      DateTime?
  completionDate DateTime?
  coverImage     String?
  isPublic       Boolean        @default(false)
  likes          Int            @default(0)
  views          Int            @default(0)
  tools          String[]
  materials      Json?
  steps          Json?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  images         ProjectImage[]
  supplies       Supply[]
  issues         Issue[]
}

model ProjectImage {
  id          String     @id @default(uuid())
  projectId   String
  imageUrl    String
  caption     String?
  isCover     Boolean    @default(false)
  uploadedAt  DateTime   @default(now())
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Supply {
  id          String     @id @default(uuid())
  projectId   String
  name        String
  quantity    Float
  unit        String?
  estimatedCost Float?
  actualCost  Float?
  isPurchased Boolean    @default(false)
  purchaseUrl String?
  notes       String?
  createdAt   DateTime   @default(now())
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Issue {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String
  severity    String
  status      String     @default("open")
  resolvedAt  DateTime?
  resolution  String?
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Trip {
  id              String         @id @default(uuid())
  userId          String
  destination     String
  startDate       DateTime
  endDate         DateTime
  budget          Float?
  currency        String         @default("USD")
  purpose         String?
  status          String         @default("planning")
  coverImage      String?
  isPublic        Boolean        @default(false)
  transportation  String[]
  accommodation   Json?
  notes           String?
  weatherInfo     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses        TripExpense[]
  itineraryItems  ItineraryItem[]
  packingItems    PackingItem[]
  documents       TripDocument[]
  companions      TripCompanion[]
  photos          TripPhoto[]
}

model TripExpense {
  id          String   @id @default(uuid())
  tripId      String
  category    String
  description String
  amount      Float
  currency    String   @default("USD")
  date        DateTime
  isPaid      Boolean  @default(false)
  paymentMethod String?
  receipt     String?
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model ItineraryItem {
  id          String   @id @default(uuid())
  tripId      String
  date        DateTime
  time        String?
  activity    String
  location    String?
  duration    Int?
  cost        Float?
  booking     Json?
  notes       String?
  status      String   @default("planned")
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model PackingItem {
  id          String   @id @default(uuid())
  tripId      String
  category    String
  item        String
  quantity    Int      @default(1)
  isPacked    Boolean  @default(false)
  isEssential Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripDocument {
  id          String   @id @default(uuid())
  tripId      String
  type        String
  name        String
  fileUrl     String
  fileSize    Int?
  uploadedAt  DateTime @default(now())
  expiryDate  DateTime?
  notes       String?
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripCompanion {
  id          String   @id @default(uuid())
  tripId      String
  name        String
  email       String?
  phone       String?
  relationship String?
  emergencyContact Boolean @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripPhoto {
  id          String   @id @default(uuid())
  tripId      String
  photoUrl    String
  caption     String?
  location    String?
  takenAt     DateTime?
  uploadedAt  DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}