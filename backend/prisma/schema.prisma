generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  username        String            @unique
  password        String
  firstName       String?
  lastName        String?
  profilePicture  String?
  role            String            @default("USER")
  isActive        Boolean           @default(true)
  bio             String?
  location        String?
  website         String?
  twitterHandle   String?
  phoneNumber     String?
  dateOfBirth     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sessions        Session[]
  tweets          Tweet[]
  contracts       Contract[]
  textExtractions TextExtraction[]
  decisions       Decision[]
  diyProjects     DIYProject[]
  trips           Trip[]
  dreams          Dream[]
  dreamPatterns   DreamPattern[]
  documents       Document[]
  apiKeys         ApiKey[]
  
  // Smart Habits relationships
  habits          Habit[]
  habitLogs       HabitLog[]
  journalEntries  JournalEntry[]
  partnerships1   AccountabilityPartnership[] @relation("User1Partnerships")
  partnerships2   AccountabilityPartnership[] @relation("User2Partnerships")
  sentMessages    PartnerMessage[] @relation("SentMessages")
  
  // Personal Analytics relationships
  personalInsights PersonalInsight[]
  moodEntries     MoodEntry[]
  lifeMetrics     LifeMetric[]
  coachingSuggestions CoachingSuggestion[]
  
  // Gamification relationships
  userLevel       UserLevel?
  userAchievements UserAchievement[]
  streaks         Streak[]
  userRewards     UserReward[]
  dailyChallengeCompletions DailyChallengeCompletion[]
  
  // Enhanced Journal relationships
  journalPrompts  JournalPrompt[]
  journalGoals    JournalGoal[]
  journalInsights JournalInsight[]
  checkInSessions CheckInSession[]
  journalStreaks  JournalStreak[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  name        String
  key         String    @unique
  service     String    // 'openai', 'anthropic', 'twitter', etc.
  lastUsed    DateTime?
  usageCount  Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([service])
}

model Tweet {
  id             String   @id @default(uuid())
  userId         String
  content        String
  mediaUrl       String?
  scheduledFor   DateTime?
  status         String   @default("draft")
  twitterId      String?
  twitterUrl     String?
  likes          Int      @default(0)
  retweets       Int      @default(0)
  replies        Int      @default(0)
  impressions    Int      @default(0)
  postedAt       DateTime?
  error          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract {
  id             String   @id @default(uuid())
  userId         String
  filename       String
  originalName   String
  filePath       String
  fileSize       Int
  mimeType       String
  uploadedAt     DateTime @default(now())
  parties        String[]
  contractType   String?
  value          Float?
  currency       String?
  startDate      DateTime?
  endDate        DateTime?
  status         String   @default("pending")
  summary        String?
  keyTerms       String[]
  risks          String[]
  obligations    String[]
  aiAnalysis     Json?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TextExtraction {
  id            String   @id @default(uuid())
  userId        String
  filename      String
  originalName  String
  filePath      String
  fileSize      Int
  mimeType      String
  extractedText String
  confidence    Float?
  language      String?
  processingTime Int?
  metadata      Json?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Decision {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  options     Json
  criteria    Json
  analysis    Json?
  recommendation String?
  status      String   @default("draft")
  decision    String?
  decisionDate DateTime?
  outcome     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DIYProject {
  id             String         @id @default(uuid())
  userId         String
  title          String
  description    String?
  category       String
  difficulty     String
  estimatedTime  Int?
  estimatedCost  Float?
  status         String         @default("planning")
  progress       Int            @default(0)
  startDate      DateTime?
  completionDate DateTime?
  coverImage     String?
  isPublic       Boolean        @default(false)
  likes          Int            @default(0)
  views          Int            @default(0)
  tools          String[]
  materials      Json?
  steps          Json?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  images         ProjectImage[]
  supplies       Supply[]
  issues         Issue[]
}

model ProjectImage {
  id          String     @id @default(uuid())
  projectId   String
  imageUrl    String
  caption     String?
  isCover     Boolean    @default(false)
  uploadedAt  DateTime   @default(now())
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Supply {
  id          String     @id @default(uuid())
  projectId   String
  name        String
  quantity    Float
  unit        String?
  estimatedCost Float?
  actualCost  Float?
  isPurchased Boolean    @default(false)
  purchaseUrl String?
  notes       String?
  createdAt   DateTime   @default(now())
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Issue {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String
  severity    String
  status      String     @default("open")
  resolvedAt  DateTime?
  resolution  String?
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Trip {
  id              String         @id @default(uuid())
  userId          String
  destination     String
  startDate       DateTime
  endDate         DateTime
  budget          Float?
  currency        String         @default("USD")
  purpose         String?
  status          String         @default("planning")
  coverImage      String?
  isPublic        Boolean        @default(false)
  transportation  String[]
  accommodation   Json?
  notes           String?
  weatherInfo     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses        TripExpense[]
  itineraryItems  ItineraryItem[]
  packingItems    PackingItem[]
  documents       TripDocument[]
  companions      TripCompanion[]
  photos          TripPhoto[]
}

model TripExpense {
  id          String   @id @default(uuid())
  tripId      String
  category    String
  description String
  amount      Float
  currency    String   @default("USD")
  date        DateTime
  isPaid      Boolean  @default(false)
  paymentMethod String?
  receipt     String?
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model ItineraryItem {
  id          String   @id @default(uuid())
  tripId      String
  date        DateTime
  time        String?
  activity    String
  location    String?
  duration    Int?
  cost        Float?
  booking     Json?
  notes       String?
  status      String   @default("planned")
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model PackingItem {
  id          String   @id @default(uuid())
  tripId      String
  category    String
  item        String
  quantity    Int      @default(1)
  isPacked    Boolean  @default(false)
  isEssential Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripDocument {
  id          String   @id @default(uuid())
  tripId      String
  type        String
  name        String
  fileUrl     String
  fileSize    Int?
  uploadedAt  DateTime @default(now())
  expiryDate  DateTime?
  notes       String?
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripCompanion {
  id          String   @id @default(uuid())
  tripId      String
  name        String
  email       String?
  phone       String?
  relationship String?
  emergencyContact Boolean @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripPhoto {
  id          String   @id @default(uuid())
  tripId      String
  photoUrl    String
  caption     String?
  location    String?
  takenAt     DateTime?
  uploadedAt  DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Dream {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  dreamDate   DateTime @default(now())
  emotions    Json?    // Array of emotions detected
  themes      Json?    // Array of themes identified
  symbols     Json?    // Array of symbols and their meanings
  lucidity    Int?     @default(0) // 0-10 scale
  clarity     Int?     @default(5) // 0-10 scale
  mood        String?  // Overall mood
  analysis    String?  @db.Text // AI analysis result
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        DreamTag[]
  insights    DreamInsight[]
  
  @@index([userId])
  @@index([dreamDate])
}

model DreamTag {
  id        String   @id @default(cuid())
  dreamId   String
  tag       String
  createdAt DateTime @default(now())
  
  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  @@unique([dreamId, tag])
  @@index([tag])
}

model DreamInsight {
  id        String   @id @default(cuid())
  dreamId   String
  type      String   // 'pattern', 'symbol', 'emotion', 'theme'
  insight   String   @db.Text
  confidence Float?  // 0-1 confidence score
  createdAt DateTime @default(now())
  
  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  @@index([dreamId])
  @@index([type])
}

model DreamPattern {
  id          String   @id @default(cuid())
  userId      String
  patternType String   // 'recurring_theme', 'emotional_trend', 'symbol_frequency'
  patternKey  String   // Unique key for the pattern (e.g., theme name, symbol name)
  pattern     Json     // Pattern data
  frequency   Int      @default(1)
  firstSeen   DateTime
  lastSeen    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, patternType, patternKey])
  @@index([userId])
  @@index([patternType])
}

// Document Organizer Models
model Document {
  id            String   @id @default(cuid())
  userId        String
  filename      String
  originalName  String
  filePath      String
  fileType      String
  fileSize      Int
  uploadDate    DateTime @default(now())
  processedDate DateTime?
  status        String   @default("processing") // processing, completed, failed
  
  // Extracted metadata
  extractedText String?  @db.Text
  ocrConfidence Float?
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  extractedData DocumentData[]
  categories    DocumentCategory[]
  tags          DocumentTag[]
  reminders     DocumentReminder[]
  
  @@index([userId])
  @@index([status])
  @@index([uploadDate])
}

// Smart Habits System Models
model Habit {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  category        String   // health, productivity, mindfulness, learning, etc.
  frequencyType   String   // daily, weekly, custom
  frequencyDetails Json?   // {times_per_week: 3, specific_days: ["mon", "wed", "fri"]}
  microHabits     Json     @default("[]") // ["Put on gym clothes", "Drive to gym", "Complete workout"]
  targetTime      String?  // "09:00" - preferred time
  reminderEnabled Boolean  @default(true)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs            HabitLog[]
  journalEntries  JournalEntry[]
  predictions     HabitPrediction[]
  partnerships    AccountabilityPartnership[] @relation("HabitPartnerships")
  
  @@index([userId])
  @@index([category])
  @@index([isActive])
}

model HabitLog {
  id               String    @id @default(cuid())
  habitId          String
  userId           String
  completedAt      DateTime  @default(now())
  completionStatus String    // completed, skipped, partial
  qualityRating    Int?      // 1-5 scale
  mood             String?   // happy, neutral, stressed, tired, energetic
  energyLevel      String?   // low, medium, high
  location         String?
  contextNotes     String?
  skipReason       String?   // no_time, forgot, sick, traveling, unmotivated
  duration         Int?      // minutes spent on habit
  createdAt        DateTime  @default(now())
  
  // Relationships
  habit            Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([habitId])
  @@index([userId])
  @@index([completedAt])
  @@index([completionStatus])
}

model JournalEntry {
  id                  String   @id @default(cuid())
  userId              String
  habitId             String?
  promptType          String   // daily_reflection, habit_success, habit_skip, weekly_summary
  promptText          String
  userResponse        String   @db.Text
  aiAnalysis          Json?    // {sentiment, key_themes, actionable_insights, concerns}
  isVoiceEntry        Boolean  @default(false)
  
  // Enhanced journal fields
  entryType           String   @default("free_form") // free_form, guided, check_in, goal_reflection, therapeutic
  mood                String?
  moodIntensity       Int?
  energyLevel         String?
  isConversational    Boolean  @default(false)
  conversationHistory Json     @default("[]")
  framework           String?  // CBT, gratitude, dream, etc.
  tags                String[] @default([])
  location            String?
  weather             String?
  sessionDuration     Int?     // in seconds
  wordCount           Int      @default(0)
  parentEntryId       String?
  
  createdAt           DateTime @default(now())
  
  // Relationships
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit               Habit?   @relation(fields: [habitId], references: [id], onDelete: SetNull)
  parentEntry         JournalEntry? @relation("JournalEntryHierarchy", fields: [parentEntryId], references: [id], onDelete: SetNull)
  childEntries        JournalEntry[] @relation("JournalEntryHierarchy")
  
  @@index([userId])
  @@index([habitId])
  @@index([promptType])
  @@index([createdAt])
  @@index([entryType])
  @@index([mood])
}

model HabitPrediction {
  id                String   @id @default(cuid())
  habitId           String
  predictionDate    DateTime
  skipRiskScore     Float    // 0.0 to 1.0
  recommendedTimes  Json     // ["09:00", "13:00", "18:00"]
  riskFactors       Json     // {late_meeting: 0.3, low_energy: 0.2}
  confidence        Float    // model confidence in prediction
  actualOutcome     String?  // completed, skipped - filled after the fact
  createdAt         DateTime @default(now())
  
  // Relationships
  habit             Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  @@index([habitId])
  @@index([predictionDate])
}

model AccountabilityPartnership {
  id               String   @id @default(cuid())
  user1Id          String
  user2Id          String
  sharedHabits     String[] // Array of habit IDs
  partnershipType  String   // mutual_support, competitive, mentor
  matchedOn        Json?    // {shared_categories, timezone_compatibility, etc.}
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  
  // Relationships
  user1            User     @relation("User1Partnerships", fields: [user1Id], references: [id], onDelete: Cascade)
  user2            User     @relation("User2Partnerships", fields: [user2Id], references: [id], onDelete: Cascade)
  habits           Habit[]  @relation("HabitPartnerships")
  messages         PartnerMessage[]
  
  @@index([user1Id])
  @@index([user2Id])
  @@index([isActive])
}

model PartnerMessage {
  id           String   @id @default(cuid())
  partnershipId String
  senderId     String
  message      String   @db.Text
  messageType  String   // encouragement, check_in, celebration, challenge
  createdAt    DateTime @default(now())
  
  // Relationships
  partnership  AccountabilityPartnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)
  sender       User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([partnershipId])
  @@index([senderId])
  @@index([createdAt])
}

model DocumentData {
  id           String   @id @default(cuid())
  documentId   String
  fieldName    String   // e.g., 'vendor', 'amount', 'date', 'invoice_number'
  fieldValue   String
  fieldType    String   // 'text', 'number', 'date', 'currency'
  confidence   Float    @default(1.0)
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, fieldName])
  @@index([documentId])
  @@index([fieldName])
}

model Category {
  id           String   @id @default(cuid())
  name         String
  description  String?
  parentId     String?
  userId       String?  // null for system categories, userId for custom categories
  isSystem     Boolean  @default(false)
  icon         String?
  color        String?
  
  parent       Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryHierarchy")
  documents    DocumentCategory[]
  
  @@unique([name, userId])
  @@index([userId])
  @@index([parentId])
}

model DocumentCategory {
  id           String   @id @default(cuid())
  documentId   String
  categoryId   String
  confidence   Float    @default(1.0) // For AI-assigned categories
  isManual     Boolean  @default(false)
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, categoryId])
  @@index([documentId])
  @@index([categoryId])
}

model Tag {
  id           String   @id @default(cuid())
  name         String
  userId       String
  
  documents    DocumentTag[]
  
  @@unique([name, userId])
  @@index([userId])
}

model DocumentTag {
  id           String   @id @default(cuid())
  documentId   String
  tagId        String
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag          Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, tagId])
  @@index([documentId])
  @@index([tagId])
}

model DocumentReminder {
  id           String   @id @default(cuid())
  documentId   String
  reminderDate DateTime
  reminderType String   // 'expiration', 'renewal', 'payment_due', 'custom'
  description  String
  completed    Boolean  @default(false)
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([reminderDate])
  @@index([completed])
}

// Personal Analytics & Insights Models
model PersonalInsight {
  id             String   @id @default(cuid())
  userId         String
  insightType    String   // 'life_pattern', 'mood_trend', 'energy_pattern', 'cross_domain', 'coaching_suggestion'
  title          String
  description    String   @db.Text
  dataPoints     Json     // Raw data used for analysis
  confidence     Float    // 0-1 confidence score
  priority       String   @default("medium") // low, medium, high, urgent
  status         String   @default("active") // active, acknowledged, dismissed
  actionable     Boolean  @default(false)
  categories     String[] // domains this insight touches (habits, dreams, decisions, etc.)
  timeframe      String?  // 'daily', 'weekly', 'monthly', 'yearly'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  acknowledgedAt DateTime?
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([insightType])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

model MoodEntry {
  id           String   @id @default(cuid())
  userId       String
  mood         String   // happy, sad, anxious, excited, calm, stressed, angry, content, etc.
  intensity    Int      // 1-10 scale
  energyLevel  String   // very_low, low, medium, high, very_high
  notes        String?  @db.Text
  triggers     String[] // work, family, health, weather, exercise, sleep, etc.
  activities   String[] // What they were doing when they felt this way
  location     String?  // home, work, gym, outdoors, etc.
  weather      String?  // sunny, rainy, cloudy, snowy, etc.
  createdAt    DateTime @default(now())
  recordedAt   DateTime // When the mood actually occurred
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([recordedAt])
  @@index([mood])
  @@index([energyLevel])
}

model LifeMetric {
  id          String   @id @default(cuid())
  userId      String
  metricType  String   // 'productivity', 'stress_level', 'sleep_quality', 'social_interaction', 'physical_activity'
  value       Float    // Normalized 0-10 scale
  rawValue    String?  // Original value and unit
  notes       String?
  recordedAt  DateTime
  source      String?  // 'manual', 'habit_log', 'dream_analysis', 'decision_outcome'
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([metricType])
  @@index([recordedAt])
  @@index([source])
}

model CoachingSuggestion {
  id           String   @id @default(cuid())
  userId       String
  category     String   // 'habit_optimization', 'mood_improvement', 'productivity', 'stress_management', 'life_balance'
  title        String
  suggestion   String   @db.Text
  reasoning    String   @db.Text
  difficulty   String   // easy, medium, hard
  timeframe    String   // immediate, daily, weekly, monthly
  priority     Int      @default(5) // 1-10 scale
  status       String   @default("pending") // pending, accepted, dismissed, completed
  basedOn      Json     // Data sources that led to this suggestion
  createdAt    DateTime @default(now())
  acceptedAt   DateTime?
  completedAt  DateTime?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

// Gamification Models
model UserLevel {
  id                String   @id @default(cuid())
  userId            String   @unique
  level             Int      @default(1)
  currentXP         Int      @default(0)
  totalXP           Int      @default(0)
  xpToNextLevel     Int      @default(100)
  title             String   @default("Beginner")
  unlockedFeatures  String[] @default([])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([level])
}

model Achievement {
  id                String   @id @default(cuid())
  code              String   @unique // e.g., "habit_streak_7", "mood_logger_30"
  name              String
  description       String
  category          String   // habits, mood, dreams, decisions, etc.
  icon              String   // emoji or icon name
  xpReward          Int
  rarity            String   // common, rare, epic, legendary
  requirement       Json     // criteria for earning
  isSecret          Boolean  @default(false)
  sortOrder         Int      @default(0)
  createdAt         DateTime @default(now())
  
  userAchievements  UserAchievement[]
  
  @@index([category])
  @@index([rarity])
}

model UserAchievement {
  id                String   @id @default(cuid())
  userId            String
  achievementId     String
  earnedAt          DateTime @default(now())
  progress          Float    @default(0) // 0-1 for partial progress
  metadata          Json?    // additional context about how it was earned
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement       Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
}

model Streak {
  id                String   @id @default(cuid())
  userId            String
  type              String   // habit_specific, overall_habits, mood_logging, etc.
  targetId          String?  // habitId if habit-specific
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  lastActivityDate  DateTime?
  streakStartDate   DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type, targetId])
  @@index([userId])
  @@index([type])
  @@index([isActive])
}

model Reward {
  id                String   @id @default(cuid())
  name              String
  description       String
  type              String   // badge, theme, feature_unlock, title
  value             String   // actual reward data (color hex, feature name, etc.)
  cost              Int?     // if purchasable with points
  requiredLevel     Int?     // minimum level to unlock
  icon              String
  category          String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  
  userRewards       UserReward[]
  
  @@index([type])
  @@index([category])
}

model UserReward {
  id                String   @id @default(cuid())
  userId            String
  rewardId          String
  unlockedAt        DateTime @default(now())
  isEquipped        Boolean  @default(false) // for titles, themes, etc.
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward            Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  
  @@unique([userId, rewardId])
  @@index([userId])
  @@index([rewardId])
}

model DailyChallenge {
  id                String   @id @default(cuid())
  date              DateTime @unique
  type              String   // habit_completion, mood_check, dream_log, etc.
  description       String
  requirement       Json     // what needs to be done
  xpReward          Int
  bonusXP           Int?     // for completing early or with high quality
  icon              String
  createdAt         DateTime @default(now())
  
  completions       DailyChallengeCompletion[]
  
  @@index([date])
  @@index([type])
}

model DailyChallengeCompletion {
  id                String   @id @default(cuid())
  userId            String
  challengeId       String
  completedAt       DateTime @default(now())
  bonusEarned       Boolean  @default(false)
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge         DailyChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
}

// Enhanced Journal System Models
model JournalPrompt {
  id                 String    @id @default(cuid())
  userId             String
  promptCategory     String    // morning_reflection, evening_review, mood_check, etc.
  promptText         String
  followUpQuestions  Json      @default("[]")
  framework          String?   // CBT, ACT, IFS, gratitude, etc.
  isPersonalized     Boolean   @default(false)
  personalizedContext Json?
  priority           String    @default("medium")
  expiresAt          DateTime?
  usedAt             DateTime?
  responseEntryId    String?
  createdAt          DateTime  @default(now())
  
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([promptCategory])
}

model JournalGoal {
  id               String    @id @default(cuid())
  userId           String
  title            String
  description      String?
  category         String    // personal_growth, mental_health, productivity, relationships, etc.
  targetMetric     String?
  targetValue      Float?
  currentValue     Float     @default(0)
  frequency        String?   // daily, weekly, monthly
  status           String    @default("active")
  progress         Float     @default(0)
  startDate        DateTime
  targetDate       DateTime?
  completedAt      DateTime?
  linkedHabitIds   String[]  @default([])
  reflectionPrompts Json     @default("[]")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

model JournalInsight {
  id                String   @id @default(cuid())
  userId            String
  periodType        String   // daily, weekly, monthly, yearly
  periodStart       DateTime
  periodEnd         DateTime
  moodSummary       Json     // mood trends, averages, patterns
  themeAnalysis     Json     // recurring themes, topics, concerns
  progressReport    Json     // goal progress, habit adherence
  aiRecommendations Json     // personalized suggestions
  emotionalPatterns Json?
  behavioralInsights Json?
  keyMoments        Json?    // significant entries, breakthroughs
  growthIndicators  Json?
  confidenceScore   Float?
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([periodType])
}

model TherapeuticFramework {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  category    String   // therapy, mindfulness, productivity, etc.
  prompts     Json     // framework-specific prompts
  exercises   Json?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
}

model CheckInSession {
  id              String   @id @default(cuid())
  userId          String
  sessionType     String   // morning, evening, mood_check, weekly_review
  mood            String?
  energyLevel     String?
  stressLevel     Int?
  gratitudeItems  String[] @default([])
  intentions      String[] @default([])
  accomplishments String[] @default([])
  challenges      String[] @default([])
  tomorrowFocus   String?
  overallRating   Int?
  notes           String?
  linkedEntryId   String?
  completedAt     DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionType])
}

model JournalStreak {
  id              String   @id @default(cuid())
  userId          String
  streakType      String   // daily_entry, morning_checkin, mood_tracking, etc.
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  lastEntryDate   DateTime?
  streakStartDate DateTime?
  totalEntries    Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, streakType])
  @@index([userId])
}