generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  username        String            @unique
  password        String
  firstName       String?
  lastName        String?
  profilePicture  String?
  role            String            @default("USER")
  isActive        Boolean           @default(true)
  bio             String?
  location        String?
  website         String?
  twitterHandle   String?
  phoneNumber     String?
  dateOfBirth     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sessions        Session[]
  tweets          Tweet[]
  contracts       Contract[]
  textExtractions TextExtraction[]
  decisions       Decision[]
  diyProjects     DIYProject[]
  trips           Trip[]
  dreams          Dream[]
  dreamPatterns   DreamPattern[]
  documents       Document[]
  apiKeys         ApiKey[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  name        String
  key         String    @unique
  service     String    // 'openai', 'anthropic', 'twitter', etc.
  lastUsed    DateTime?
  usageCount  Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([service])
}

model Tweet {
  id             String   @id @default(uuid())
  userId         String
  content        String
  mediaUrl       String?
  scheduledFor   DateTime?
  status         String   @default("draft")
  twitterId      String?
  twitterUrl     String?
  likes          Int      @default(0)
  retweets       Int      @default(0)
  replies        Int      @default(0)
  impressions    Int      @default(0)
  postedAt       DateTime?
  error          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contract {
  id             String   @id @default(uuid())
  userId         String
  filename       String
  originalName   String
  filePath       String
  fileSize       Int
  mimeType       String
  uploadedAt     DateTime @default(now())
  parties        String[]
  contractType   String?
  value          Float?
  currency       String?
  startDate      DateTime?
  endDate        DateTime?
  status         String   @default("pending")
  summary        String?
  keyTerms       String[]
  risks          String[]
  obligations    String[]
  aiAnalysis     Json?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TextExtraction {
  id            String   @id @default(uuid())
  userId        String
  filename      String
  originalName  String
  filePath      String
  fileSize      Int
  mimeType      String
  extractedText String
  confidence    Float?
  language      String?
  processingTime Int?
  metadata      Json?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Decision {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  options     Json
  criteria    Json
  analysis    Json?
  recommendation String?
  status      String   @default("draft")
  decision    String?
  decisionDate DateTime?
  outcome     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DIYProject {
  id             String         @id @default(uuid())
  userId         String
  title          String
  description    String?
  category       String
  difficulty     String
  estimatedTime  Int?
  estimatedCost  Float?
  status         String         @default("planning")
  progress       Int            @default(0)
  startDate      DateTime?
  completionDate DateTime?
  coverImage     String?
  isPublic       Boolean        @default(false)
  likes          Int            @default(0)
  views          Int            @default(0)
  tools          String[]
  materials      Json?
  steps          Json?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  images         ProjectImage[]
  supplies       Supply[]
  issues         Issue[]
}

model ProjectImage {
  id          String     @id @default(uuid())
  projectId   String
  imageUrl    String
  caption     String?
  isCover     Boolean    @default(false)
  uploadedAt  DateTime   @default(now())
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Supply {
  id          String     @id @default(uuid())
  projectId   String
  name        String
  quantity    Float
  unit        String?
  estimatedCost Float?
  actualCost  Float?
  isPurchased Boolean    @default(false)
  purchaseUrl String?
  notes       String?
  createdAt   DateTime   @default(now())
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Issue {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String
  severity    String
  status      String     @default("open")
  resolvedAt  DateTime?
  resolution  String?
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     DIYProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Trip {
  id              String         @id @default(uuid())
  userId          String
  destination     String
  startDate       DateTime
  endDate         DateTime
  budget          Float?
  currency        String         @default("USD")
  purpose         String?
  status          String         @default("planning")
  coverImage      String?
  isPublic        Boolean        @default(false)
  transportation  String[]
  accommodation   Json?
  notes           String?
  weatherInfo     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses        TripExpense[]
  itineraryItems  ItineraryItem[]
  packingItems    PackingItem[]
  documents       TripDocument[]
  companions      TripCompanion[]
  photos          TripPhoto[]
}

model TripExpense {
  id          String   @id @default(uuid())
  tripId      String
  category    String
  description String
  amount      Float
  currency    String   @default("USD")
  date        DateTime
  isPaid      Boolean  @default(false)
  paymentMethod String?
  receipt     String?
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model ItineraryItem {
  id          String   @id @default(uuid())
  tripId      String
  date        DateTime
  time        String?
  activity    String
  location    String?
  duration    Int?
  cost        Float?
  booking     Json?
  notes       String?
  status      String   @default("planned")
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model PackingItem {
  id          String   @id @default(uuid())
  tripId      String
  category    String
  item        String
  quantity    Int      @default(1)
  isPacked    Boolean  @default(false)
  isEssential Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripDocument {
  id          String   @id @default(uuid())
  tripId      String
  type        String
  name        String
  fileUrl     String
  fileSize    Int?
  uploadedAt  DateTime @default(now())
  expiryDate  DateTime?
  notes       String?
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripCompanion {
  id          String   @id @default(uuid())
  tripId      String
  name        String
  email       String?
  phone       String?
  relationship String?
  emergencyContact Boolean @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TripPhoto {
  id          String   @id @default(uuid())
  tripId      String
  photoUrl    String
  caption     String?
  location    String?
  takenAt     DateTime?
  uploadedAt  DateTime @default(now())
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Dream {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  dreamDate   DateTime @default(now())
  emotions    Json?    // Array of emotions detected
  themes      Json?    // Array of themes identified
  symbols     Json?    // Array of symbols and their meanings
  lucidity    Int?     @default(0) // 0-10 scale
  clarity     Int?     @default(5) // 0-10 scale
  mood        String?  // Overall mood
  analysis    String?  @db.Text // AI analysis result
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        DreamTag[]
  insights    DreamInsight[]
  
  @@index([userId])
  @@index([dreamDate])
}

model DreamTag {
  id        String   @id @default(cuid())
  dreamId   String
  tag       String
  createdAt DateTime @default(now())
  
  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  @@unique([dreamId, tag])
  @@index([tag])
}

model DreamInsight {
  id        String   @id @default(cuid())
  dreamId   String
  type      String   // 'pattern', 'symbol', 'emotion', 'theme'
  insight   String   @db.Text
  confidence Float?  // 0-1 confidence score
  createdAt DateTime @default(now())
  
  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  @@index([dreamId])
  @@index([type])
}

model DreamPattern {
  id          String   @id @default(cuid())
  userId      String
  patternType String   // 'recurring_theme', 'emotional_trend', 'symbol_frequency'
  patternKey  String   // Unique key for the pattern (e.g., theme name, symbol name)
  pattern     Json     // Pattern data
  frequency   Int      @default(1)
  firstSeen   DateTime
  lastSeen    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, patternType, patternKey])
  @@index([userId])
  @@index([patternType])
}

// Document Organizer Models
model Document {
  id            String   @id @default(cuid())
  userId        String
  filename      String
  originalName  String
  filePath      String
  fileType      String
  fileSize      Int
  uploadDate    DateTime @default(now())
  processedDate DateTime?
  status        String   @default("processing") // processing, completed, failed
  
  // Extracted metadata
  extractedText String?  @db.Text
  ocrConfidence Float?
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  extractedData DocumentData[]
  categories    DocumentCategory[]
  tags          DocumentTag[]
  reminders     DocumentReminder[]
  
  @@index([userId])
  @@index([status])
  @@index([uploadDate])
}

model DocumentData {
  id           String   @id @default(cuid())
  documentId   String
  fieldName    String   // e.g., 'vendor', 'amount', 'date', 'invoice_number'
  fieldValue   String
  fieldType    String   // 'text', 'number', 'date', 'currency'
  confidence   Float    @default(1.0)
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, fieldName])
  @@index([documentId])
  @@index([fieldName])
}

model Category {
  id           String   @id @default(cuid())
  name         String
  description  String?
  parentId     String?
  userId       String?  // null for system categories, userId for custom categories
  isSystem     Boolean  @default(false)
  icon         String?
  color        String?
  
  parent       Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryHierarchy")
  documents    DocumentCategory[]
  
  @@unique([name, userId])
  @@index([userId])
  @@index([parentId])
}

model DocumentCategory {
  id           String   @id @default(cuid())
  documentId   String
  categoryId   String
  confidence   Float    @default(1.0) // For AI-assigned categories
  isManual     Boolean  @default(false)
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, categoryId])
  @@index([documentId])
  @@index([categoryId])
}

model Tag {
  id           String   @id @default(cuid())
  name         String
  userId       String
  
  documents    DocumentTag[]
  
  @@unique([name, userId])
  @@index([userId])
}

model DocumentTag {
  id           String   @id @default(cuid())
  documentId   String
  tagId        String
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  tag          Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, tagId])
  @@index([documentId])
  @@index([tagId])
}

model DocumentReminder {
  id           String   @id @default(cuid())
  documentId   String
  reminderDate DateTime
  reminderType String   // 'expiration', 'renewal', 'payment_due', 'custom'
  description  String
  completed    Boolean  @default(false)
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@index([reminderDate])
  @@index([completed])
}